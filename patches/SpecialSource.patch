--- SpecialSource.java	2025-10-26 17:01:29.496080971 +0800
+++ SpecialSource.java	2025-10-26 17:26:08.103379711 +0800
@@ -7,6 +7,7 @@
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 import java.util.jar.JarFile;
 import joptsimple.OptionParser;
@@ -18,236 +19,183 @@
 import net.md_5.ss.model.ItemInfo;
 import net.md_5.ss.model.Resource;
 import net.md_5.ss.output.JarOutput;
+import net.md_5.ss.output.Output;
 import net.md_5.ss.remapper.EnhancedMethodRemapper;
 import net.md_5.ss.remapper.EnhancedRemapper;
+import net.md_5.ss.remapper.EnhancedMethodRemapper.LVTStyle;
+import net.md_5.ss.remapper.EnhancedRemapper.AutoMember;
 import net.md_5.ss.repo.AggregateRepo;
 import net.md_5.ss.repo.ClassRepo;
 import net.md_5.ss.repo.JarRepo;
 import net.md_5.ss.repo.RuntimeRepo;
 
 public class SpecialSource {
+    public SpecialSource() {
+    }
 
-    public SpecialSource() {}
-
-    public static void main(String[] astring) throws IOException {
-        if (astring.length == 0) {
+    public static void main(String[] args) throws IOException {
+        if (args.length == 0) {
             System.out.println("SpecialSource 2.0: (compare|map) [args]");
         } else {
-            String[] astring1 = (String[]) Arrays.copyOfRange(astring, 1, astring.length);
-            OptionParser optionparser = null;
-            String s = astring[0];
-            byte b0 = -1;
-
-            switch (s.hashCode()) {
-            case 107868:
-                if (s.equals("map")) {
-                    b0 = 1;
-                }
-                break;
-
-            case 950484197:
-                if (s.equals("compare")) {
-                    b0 = 0;
-                }
-            }
-
-            switch (b0) {
-            case 0:
-                throw new UnsupportedOperationException();
-
-            case 1:
-                optionparser = map(astring1);
-                if (optionparser != null) {
-                    optionparser.printHelpOn(System.err);
-                }
-
-                return;
+            String[] taskArgs = (String[])Arrays.copyOfRange(args, 1, args.length);
+            OptionParser help = null;
+            switch (args[0]) {
+                case "compare":
+                    throw new UnsupportedOperationException();
+                case "map":
+                    help = map(taskArgs);
+                    if (help != null) {
+                        help.printHelpOn(System.err);
+                    }
 
-            default:
-                throw new UnsupportedOperationException();
+                    return;
+                default:
+                    throw new UnsupportedOperationException();
             }
         }
     }
 
-    private static OptionParser map(String[] astring) throws IOException {
-        OptionParser optionparser = new OptionParser() {
+    private static OptionParser map(String[] args) throws IOException {
+        OptionParser parser = new OptionParser() {
             {
-                this.acceptsAll(Arrays.asList(new String[] { "i", "in-jar"}), "Input JAR").withRequiredArg().ofType(File.class);
-                this.acceptsAll(Arrays.asList(new String[] { "o", "out-jar"}), "Output JAR").withRequiredArg().ofType(File.class);
-                this.acceptsAll(Arrays.asList(new String[] { "m", "mappings"}), "Mappings").withRequiredArg().ofType(File.class).withValuesSeparatedBy(',');
-                this.acceptsAll(Arrays.asList(new String[] { "e", "excludes"}), "Excludes").withRequiredArg().ofType(File.class);
-                this.acceptsAll(Arrays.asList(new String[] { "auto-lvt"}), "Fix LVT automatically in the specified style").withRequiredArg().ofType(EnhancedMethodRemapper.LVTStyle.class).defaultsTo(EnhancedMethodRemapper.LVTStyle.NONE, new EnhancedMethodRemapper.LVTStyle[0]);
-                this.acceptsAll(Arrays.asList(new String[] { "auto-member"}), "Automatically generate names for the given member types").withRequiredArg().ofType(EnhancedRemapper.AutoMember.class);
-                this.acceptsAll(Arrays.asList(new String[] { "only"}), "Map only the specified packages").withRequiredArg().ofType(String.class);
+                this.acceptsAll(Arrays.asList("i", "in-jar"), "Input JAR").withRequiredArg().ofType(File.class);
+                this.acceptsAll(Arrays.asList("o", "out-jar"), "Output JAR").withRequiredArg().ofType(File.class);
+                this.acceptsAll(Arrays.asList("m", "mappings"), "Mappings").withRequiredArg().ofType(File.class).withValuesSeparatedBy(',');
+                this.acceptsAll(Arrays.asList("e", "excludes"), "Excludes").withRequiredArg().ofType(File.class);
+                this.acceptsAll(Arrays.asList("auto-lvt"), "Fix LVT automatically in the specified style").withRequiredArg().ofType(EnhancedMethodRemapper.LVTStyle.class).defaultsTo(LVTStyle.NONE, new EnhancedMethodRemapper.LVTStyle[0]);
+                this.acceptsAll(Arrays.asList("auto-member"), "Automatically generate names for the given member types").withRequiredArg().ofType(EnhancedRemapper.AutoMember.class);
+                this.acceptsAll(Arrays.asList("only"), "Map only the specified packages").withRequiredArg().ofType(String.class);
             }
         };
-        OptionSet optionset = optionparser.parse(astring);
-        File file = (File) optionset.valueOf("in-jar");
-        AggregateRepo aggregaterepo = new AggregateRepo(new ClassRepo[] { new JarRepo(new JarFile(file)), RuntimeRepo.getInstance()});
-        JarOutput jaroutput = new JarOutput((File) optionset.valueOf("out-jar"));
-        Iterator iterator = optionset.valuesOf("mappings").iterator();
-
-        while (iterator.hasNext()) {
-            File file1 = (File) iterator.next();
-            MappingData mappingdata = new MappingData();
-            String s = extension(file1);
-            byte b0 = -1;
-
-            switch (s.hashCode()) {
-            case 111269:
-                if (s.equals("prg")) {
-                    b0 = 1;
-                }
-                break;
-
-            case 115312:
-                if (s.equals("txt")) {
-                    b0 = 2;
-                }
-                break;
-
-            case 3063461:
-                if (s.equals("csrg")) {
-                    b0 = 0;
-                }
-            }
-
-            switch (b0) {
-            case 0:
-                (new CompactSearge()).load(file1, mappingdata);
-                break;
-
-            case 1:
-            case 2:
-                (new Proguard()).load(file1, mappingdata);
-                break;
-
-            default:
-                throw new IllegalArgumentException("Unknown mappings format");
-            }
-
-            EnhancedRemapper enhancedremapper = new EnhancedRemapper(aggregaterepo, mappingdata, optionset.valuesOf("auto-member"), (EnhancedMethodRemapper.LVTStyle) optionset.valueOf("auto-lvt"));
-            HashSet hashset = new HashSet(optionset.valuesOf("only"));
-            HashSet hashset1 = new HashSet();
-
-            if (optionset.has("excludes")) {
-                hashset1.addAll(Files.readLines((File) optionset.valueOf("excludes"), Charsets.UTF_8));
-            }
-
-            Iterator iterator1;
-            ItemInfo iteminfo;
-
-            if (enhancedremapper.getAutoMember().contains(EnhancedRemapper.AutoMember.SYNTHETIC)) {
-                iterator1 = aggregaterepo.iterator();
-
-                while (iterator1.hasNext()) {
-                    iteminfo = (ItemInfo) iterator1.next();
-                    if (shouldHandle(iteminfo, hashset, hashset1) == SpecialSource.HandleType.REMAP && iteminfo instanceof ClassInfo) {
-                        SyntheticFinder.addSynthetics(((ClassInfo) iteminfo).getNode(), enhancedremapper, mappingdata);
+        OptionSet set = parser.parse(args);
+        File inJar = (File)set.valueOf("in-jar");
+        ClassRepo inRepo = new AggregateRepo(new ClassRepo[]{new JarRepo(new JarFile(inJar)), RuntimeRepo.getInstance()});
+        Output out = new JarOutput((File)set.valueOf("out-jar"));
+        Iterator var6 = set.valuesOf("mappings").iterator();
+
+        while(var6.hasNext()) {
+            File file = (File)var6.next();
+            MappingData mappingData = new MappingData();
+            switch (extension(file)) {
+                case "csrg":
+                    (new CompactSearge()).load(file, mappingData);
+                    break;
+                case "prg":
+                case "txt":
+                    (new Proguard()).load(file, mappingData);
+                    break;
+                default:
+                    throw new IllegalArgumentException("Unknown mappings format");
+            }
+
+            EnhancedRemapper remapper = new EnhancedRemapper(inRepo, mappingData, (List<AutoMember>)set.valuesOf("auto-member"), (EnhancedMethodRemapper.LVTStyle)set.valueOf("auto-lvt"));
+            Set<String> includes = new HashSet(set.valuesOf("only"));
+            Set<String> excludes = new HashSet();
+            if (set.has("excludes")) {
+                excludes.addAll(Files.readLines((File)set.valueOf("excludes"), Charsets.UTF_8));
+            }
+
+            Iterator var12;
+            ItemInfo item;
+            if (remapper.getAutoMember().contains(AutoMember.SYNTHETIC)) {
+                var12 = inRepo.iterator();
+
+                while(var12.hasNext()) {
+                    item = (ItemInfo)var12.next();
+                    if (shouldHandle(item, includes, excludes) == SpecialSource.HandleType.REMAP && item instanceof ClassInfo) {
+                        SyntheticFinder.addSynthetics(((ClassInfo)item).getNode(), remapper, mappingData);
                     }
                 }
             }
 
-            iterator1 = aggregaterepo.iterator();
-
-            while (iterator1.hasNext()) {
-                iteminfo = (ItemInfo) iterator1.next();
-                SpecialSource.HandleType specialsource_handletype = shouldHandle(iteminfo, hashset, hashset1);
-
-                if (iteminfo instanceof ClassInfo) {
-                    ClassInfo classinfo = (ClassInfo) iteminfo;
-
-                    switch (null.$SwitchMap$net$md_5$ss$SpecialSource$HandleType[specialsource_handletype.ordinal()]) {
-                    case 1:
-                        jaroutput.write(classinfo.getVersionBase() + enhancedremapper.map(classinfo.getName()) + ".class", classinfo.remap(enhancedremapper));
-                        break;
+            var12 = inRepo.iterator();
 
-                    case 2:
-                        jaroutput.write(classinfo.getVersionBase() + classinfo.getName() + ".class", classinfo.toByteArray());
-
-                    case 3:
-                        break;
-
-                    default:
-                        throw new IllegalArgumentException("Unknown handle status");
+            while(var12.hasNext()) {
+                item = (ItemInfo)var12.next();
+                HandleType handle = shouldHandle(item, includes, excludes);
+                if (item instanceof ClassInfo) {
+                    ClassInfo c = (ClassInfo)item;
+                    switch (handle) {
+                        case REMAP:
+                            out.write(c.getVersionBase() + remapper.map(c.getName()) + ".class", c.remap(remapper));
+                            break;
+                        case INCLUDE:
+                            out.write(c.getVersionBase() + c.getName() + ".class", c.toByteArray());
+                        case EXCLUDE:
+                            break;
+                        default:
+                            throw new IllegalArgumentException("Unknown handle status");
                     }
-                } else if (iteminfo instanceof Resource) {
-                    Resource resource = (Resource) iteminfo;
-
-                    jaroutput.write(resource.getPath(), resource.getData());
+                } else if (item instanceof Resource) {
+                    Resource r = (Resource)item;
+                    out.write(r.getPath(), r.getData());
                 }
             }
 
-            System.out.println(mappingdata.printUnused());
+            System.out.println(mappingData.printUnused());
         }
 
-        jaroutput.close();
+        out.close();
         return null;
     }
 
-    private static SpecialSource.HandleType shouldHandle(ItemInfo iteminfo, Set<String> set, Set<String> set1) {
-        String s;
-
-        if (iteminfo instanceof ClassInfo) {
-            s = ((ClassInfo) iteminfo).getName();
+    private static HandleType shouldHandle(ItemInfo item, Set<String> includes, Set<String> excludes) {
+        String thing;
+        if (item instanceof ClassInfo) {
+            thing = ((ClassInfo)item).getName();
         } else {
-            if (!(iteminfo instanceof Resource)) {
+            if (!(item instanceof Resource)) {
                 return SpecialSource.HandleType.REMAP;
             }
 
-            s = ((Resource) iteminfo).getPath();
+            thing = ((Resource)item).getPath();
         }
 
-        if (!set1.isEmpty()) {
-            String s1 = s;
-            int i = s.indexOf(36);
-
-            if (i != -1) {
-                s1 = s.substring(0, i);
+        if (!excludes.isEmpty()) {
+            String excludeName = thing;
+            int dollar = excludeName.indexOf(36);
+            if (dollar != -1) {
+                excludeName = excludeName.substring(0, dollar);
             }
 
-            if (set1.contains(s1)) {
+            if (excludes.contains(excludeName)) {
                 return SpecialSource.HandleType.EXCLUDE;
             }
         }
 
-        if (set.isEmpty()) {
+        if (includes.isEmpty()) {
             return SpecialSource.HandleType.REMAP;
         } else {
-            Iterator iterator = set.iterator();
-
-            String s2;
+            Iterator var6 = includes.iterator();
 
+            String match;
             do {
-                if (!iterator.hasNext()) {
+                if (!var6.hasNext()) {
                     return SpecialSource.HandleType.INCLUDE;
                 }
 
-                s2 = (String) iterator.next();
-                if (s2.equals(".") && !s.contains("/")) {
+                match = (String)var6.next();
+                if (match.equals(".") && !thing.contains("/")) {
                     return SpecialSource.HandleType.REMAP;
                 }
-            } while (!s.startsWith(s2));
+            } while(!thing.startsWith(match));
 
             return SpecialSource.HandleType.REMAP;
         }
     }
 
     private static String extension(File file) {
-        String s = file.getName();
-        int i = s.lastIndexOf(46);
-
-        return i == -1 ? s : s.substring(i + 1);
+        String name = file.getName();
+        int dotIndex = name.lastIndexOf(46);
+        return dotIndex == -1 ? name : name.substring(dotIndex + 1);
     }
 
     private static enum HandleType {
+        REMAP,
+        INCLUDE,
+        EXCLUDE;
 
-        REMAP, INCLUDE, EXCLUDE;
-
-        private HandleType() {}
-
-        private static SpecialSource.HandleType[] $values() {
-            return new SpecialSource.HandleType[] { SpecialSource.HandleType.REMAP, SpecialSource.HandleType.INCLUDE, SpecialSource.HandleType.EXCLUDE};
+        private HandleType() {
         }
     }
 }
